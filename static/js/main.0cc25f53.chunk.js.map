{"version":3,"sources":["components/Navbar.jsx","SortingAlgorithms/MergeSortAnimation.jsx","SortingAlgorithms/QuickSortAnimation.jsx","components/sorter.jsx","SortingAlgorithms/BubbleSortAnimation.jsx","SortingAlgorithms/SelectionSortAnimation.jsx","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","PushRandomNumber","finishedSorting","initialSort","array","i","NUMBER_OF_ARRAY_BARS","push","min","max","Math","floor","random","bars","document","getElementsByClassName","length","style","backgroundColor","setState","handleSelection","e","selectionSort","state","handleMerge","mergeSort","handleBubble","bubbleSort","handleQuick","quickSort","this","className","key","onClick","role","aria-label","map","value","index","height","Component","MergeSortAnimation","animations","copyOfArray","slice","temp","start","end","mid","k","j","merge","QuickSortAnimation","l","h","piv","t","partition","Total_time_taken","Sorter","n","BubbleSortAnimation","arrayBars","barOneIdx","newHeight1","barTwoIdx","newHeight2","barOneStyle","barTwoStyle","setTimeout","Color","FinishedSorting","color","newHeight","tempVariable","SelectionSortAnimation","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0cc25f53.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\n//No. of Array-Bars(This value chosen so that all bars fit in a single page)\r\nconst NUMBER_OF_ARRAY_BARS = 80;\r\n// const NUMBER_OF_ARRAY_BARS = 5;\r\n\r\n//Main Color of the Array-Bars\r\nconst PRIMARY_COLOR = \"cornflowerblue\";\r\n\r\nexport default class Navbar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      array: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.PushRandomNumber();\r\n  }\r\n  //Function to push random nos. in the array\r\n  PushRandomNumber = () => {\r\n    if (\r\n      this.props.finishedSorting === true ||\r\n      this.props.initialSort === true\r\n    ) {\r\n      const array = [];\r\n      for (let i = 0; i < NUMBER_OF_ARRAY_BARS - 1; i++) {\r\n        //Range of nos. is chosen so that array bar height fit in the page\r\n        //Least value is taken as 5 so that smallest bar is significantly visible\r\n        array.push(randomNoFromInterval(5, 535));\r\n      }\r\n      array.push(535);\r\n      let bars = document.getElementsByClassName(\"array-bar\");\r\n      //change color to blue\r\n      for (let i = 0; i < bars.length; i++)\r\n        bars[i].style.backgroundColor = PRIMARY_COLOR;\r\n\r\n      this.setState({ array });\r\n    }\r\n  };\r\n\r\n  handleSelection = (e) => {\r\n    this.props.selectionSort(this.state.array);\r\n  };\r\n\r\n  handleMerge = (e) => {\r\n    this.props.mergeSort(this.state.array);\r\n  };\r\n\r\n  handleBubble = (e) => {\r\n    this.props.bubbleSort(this.state.array);\r\n  };\r\n\r\n  handleQuick = (e) => {\r\n    this.props.quickSort(this.state.array);\r\n  };\r\n\r\n  render() {\r\n    const { array } = this.state;\r\n    return (\r\n      <div className=\"parent\">\r\n        <nav className=\"navbar navbar-dark bg-dark\">\r\n          <div className=\"container-fluid\">\r\n            <div className=\"navbar-header\">\r\n              <button\r\n                className=\"btn btn-outline-light navbar-btn\"\r\n                key={this.props.finishedSorting}\r\n                onClick={this.PushRandomNumber}\r\n              >\r\n                Generate New Array\r\n              </button>\r\n            </div>\r\n\r\n            <div className=\"btn-group\" role=\"group\" aria-label=\"Basic example\">\r\n              <button\r\n                className=\"btn btn-outline-light navbar-btn m-2\"\r\n                onClick={() => this.handleBubble()}\r\n              >\r\n                Bubble Sort\r\n              </button>\r\n\r\n              <button\r\n                className=\"btn btn-outline-light navbar-btn m-2\"\r\n                onClick={() => this.handleSelection()}\r\n              >\r\n                Selection Sort\r\n              </button>\r\n\r\n              <button\r\n                className=\"btn btn-outline-light navbar-btn m-2\"\r\n                onClick={() => this.handleMerge()}\r\n              >\r\n                Merge Sort\r\n              </button>\r\n\r\n              <button\r\n                className=\"btn btn-outline-light navbar-btn m-2\"\r\n                onClick={() => this.handleQuick()}\r\n              >\r\n                Quick Sort\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </nav>\r\n\r\n        <div className=\"array-container\">\r\n          {array.map((value, index) => (\r\n            <div\r\n              className=\"array-bar\"\r\n              key={index}\r\n              style={{\r\n                backgroundColor: PRIMARY_COLOR,\r\n                height: `${value}px`,\r\n              }}\r\n            ></div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n//Function to generate random nos. in a specified range(Requirement of javascript to specify range)\r\nfunction randomNoFromInterval(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n","export function MergeSortAnimation(array) {\n  const animations = [];\n  const copyOfArray = array.slice();\n  const temp = array.slice();\n  mergeSort(copyOfArray, 0, array.length - 1, temp, animations);\n  return animations;\n}\n\nfunction mergeSort(copyOfArray, start, end, temp, animations) {\n  if (start < end) {\n    const mid = Math.floor((start + end) / 2);\n    mergeSort(temp, start, mid, copyOfArray, animations);\n    mergeSort(temp, mid + 1, end, copyOfArray, animations);\n    merge(copyOfArray, start, mid, end, temp, animations);\n  }\n}\n\nfunction merge(copyOfArray, start, mid, end, temp, animations) {\n  let k = start;\n  let i = start;\n  let j = mid + 1;\n  while (i <= mid && j <= end) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, j]);\n    if (temp[i] <= temp[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, temp[i]]);\n      copyOfArray[k++] = temp[i++];\n    } else {\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, temp[j]]);\n      copyOfArray[k++] = temp[j++];\n    }\n  }\n  while (i <= mid) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, i]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([i, i]);\n    // We overwrite the value at index k in the original array with the\n    // value at index i in the auxiliary array.\n    animations.push([k, temp[i]]);\n    copyOfArray[k++] = temp[i++];\n  }\n  while (j <= end) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([j, j]);\n    // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n    animations.push([j, j]);\n    // We overwrite the value at index k in the original array with the\n    // value at index j in the auxiliary array.\n    animations.push([k, temp[j]]);\n    copyOfArray[k++] = temp[j++];\n  }\n}\n","export function QuickSortAnimation(array) {\n  const temp = array.slice();\n  const animations = [];\n  quickSort(temp, 0, array.length - 1, animations);\n  return animations;\n}\n\nfunction quickSort(temp, l, h, animations) {\n  if (l < h) {\n    let piv = partition(temp, l, h, animations);\n    quickSort(temp, l, piv - 1, animations);\n    quickSort(temp, piv + 1, h, animations);\n  }\n}\n\nfunction partition(temp, l, h, animations) {\n  let piv = temp[h],\n    i = l - 1,\n    j;\n  for (j = l; j < h; j++) {\n    if (temp[j] <= piv) {\n      i++;\n      animations.push([j, temp[j]]);\n      animations.push([i, temp[i]]);\n\n      let t = temp[j];\n      temp[j] = temp[i];\n      temp[i] = t;\n\n      animations.push([j, temp[j]]);\n      animations.push([i, temp[i]]);\n    }\n  }\n\n  animations.push([h, temp[h]]);\n  animations.push([i + 1, temp[i + 1]]);\n\n  let t = temp[h];\n  temp[h] = temp[i + 1];\n  temp[i + 1] = t;\n\n  animations.push([h, temp[h]]);\n  animations.push([i + 1, temp[i + 1]]);\n\n  return i + 1;\n}\n","import React, { Component } from \"react\";\nimport \"./Body.css\";\nimport Navbar from \"../components/Navbar\";\nimport { MergeSortAnimation } from \"../SortingAlgorithms/MergeSortAnimation\";\nimport { BubbleSortAnimation } from \"../SortingAlgorithms/BubbleSortAnimation\";\nimport { SelectionSortAnimation } from \"../SortingAlgorithms/SelectionSortAnimation\";\nimport { QuickSortAnimation } from \"../SortingAlgorithms/QuickSortAnimation\";\n\n//Main Color of the Array-Bars\nconst PRIMARY_COLOR = \"cornflowerblue\";\n//Speed of the Animation\nconst ANIMATION_SPEED_MS = 10;\n//Color of the Array-Bars which are being compared during the sorting\nconst SECONDARY_COLOR = \"red\";\n//Color of bars when array is Sorted\nconst FINAL_COLOR = \"SlateBlue\";\n//Total time taken to finish Sorting(Global Variable)\nvar Total_time_taken;\nvar initialSort = true;\n\nexport default class Sorter extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      finishedSorting: false,\n    };\n  }\n\n  FinishedSorting() {\n    let bars = document.getElementsByClassName(\"array-bar\");\n    setTimeout(() => {\n      for (let i = 0; i < bars.length; i++)\n        bars[i].style.backgroundColor = FINAL_COLOR;\n    }, Total_time_taken * ANIMATION_SPEED_MS);\n    setTimeout(() => {\n      this.setState({ finishedSorting: true });\n    }, Total_time_taken * ANIMATION_SPEED_MS);\n  }\n\n  bubbleSort = (array) => {\n    // console.log(array);\n    // const jsSortedArray = array.slice().sort((a, b) => a - b);\n    // const NewArray = BubbleSortAnimation(array);\n    // console.log(checkIfArraysAreEqual(jsSortedArray, NewArray));\n\n    if (this.state.finishedSorting || initialSort) {\n      initialSort = false;\n      this.setState({ finishedSorting: false });\n      const animations = BubbleSortAnimation(array);\n\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      // var count = 0;\n      for (let i = 0; i < animations.length - 1; i++) {\n        const [barOneIdx, newHeight1] = animations[i];\n        const [barTwoIdx, newHeight2] = animations[i + 1];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n\n        //console.log(i, i + 1);\n        setTimeout(() => {\n          const Color = i % 2 ? SECONDARY_COLOR : PRIMARY_COLOR;\n          barOneStyle.backgroundColor = Color;\n          barTwoStyle.backgroundColor = Color;\n        }, i * ANIMATION_SPEED_MS);\n\n        setTimeout(() => {\n          barOneStyle.height = `${newHeight1}px`;\n          barTwoStyle.height = `${newHeight2}px`;\n        }, i * ANIMATION_SPEED_MS);\n\n        Total_time_taken = i;\n      }\n      this.setState({ array });\n\n      this.FinishedSorting();\n    }\n  };\n\n  mergeSort = (array) => {\n    //do Merge Sort on array\n\n    if (this.state.finishedSorting || initialSort) {\n      initialSort = false;\n      this.setState({ finishedSorting: false });\n      const animations = MergeSortAnimation(array);\n\n      for (let i = 0; i < animations.length; i++) {\n        const arrayBars = document.getElementsByClassName(\"array-bar\");\n        const isColorChange = i % 3 !== 2;\n\n        if (isColorChange) {\n          const [barOneIdx, barTwoIdx] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          const barTwoStyle = arrayBars[barTwoIdx].style;\n          const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n          setTimeout(() => {\n            barOneStyle.backgroundColor = color;\n            barTwoStyle.backgroundColor = color;\n          }, i * ANIMATION_SPEED_MS);\n        } else {\n          setTimeout(() => {\n            const [barOneIdx, newHeight] = animations[i];\n            const barOneStyle = arrayBars[barOneIdx].style;\n            barOneStyle.height = `${newHeight}px`;\n          }, i * ANIMATION_SPEED_MS);\n        }\n        Total_time_taken = i;\n      }\n\n      this.setState({ array });\n\n      this.FinishedSorting();\n    }\n  };\n\n  selectionSort = (array) => {\n    if (this.state.finishedSorting || initialSort) {\n      initialSort = false;\n      this.setState({ finishedSorting: false });\n      const animations = SelectionSortAnimation(array);\n\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n\n      for (let i = 0; i < animations.length - 1; i++) {\n        const [barOneIdx, newHeight1] = animations[i];\n        const [barTwoIdx, newHeight2] = animations[i + 1];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n\n        // //console.log(i, i + 1);\n        // setTimeout(() => {\n        //   const Color = i % 2 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        //   barOneStyle.backgroundColor = Color;\n        //   barTwoStyle.backgroundColor = Color;\n        // }, i * ANIMATION_SPEED_MS);\n\n        setTimeout(() => {\n          barOneStyle.height = `${newHeight1}px`;\n          barTwoStyle.height = `${newHeight2}px`;\n        }, i * ANIMATION_SPEED_MS);\n\n        Total_time_taken = i;\n      }\n      this.setState({ array });\n\n      this.FinishedSorting();\n    }\n  };\n\n  quickSort = (array) => {\n    if (this.state.finishedSorting || initialSort) {\n      initialSort = false;\n      this.setState({ finishedSorting: false });\n      const animations = QuickSortAnimation(array);\n\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n\n      for (let i = 0; i < animations.length - 1; i++) {\n        const [barOneIdx, newHeight1] = animations[i];\n        const [barTwoIdx, newHeight2] = animations[i + 1];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n\n        // //console.log(i, i + 1);\n        // setTimeout(() => {\n        //   const Color = i % 2 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        //   barOneStyle.backgroundColor = Color;\n        //   barTwoStyle.backgroundColor = Color;\n        // }, i * ANIMATION_SPEED_MS);\n\n        setTimeout(() => {\n          barOneStyle.height = `${newHeight1}px`;\n          barTwoStyle.height = `${newHeight2}px`;\n        }, i * ANIMATION_SPEED_MS);\n\n        Total_time_taken = i;\n      }\n      this.setState({ array });\n\n      this.FinishedSorting();\n    }\n\n    // if (this.state.finishedSorting || initialSort) {\n    //   initialSort = false;\n    //   this.setState({ finishedSorting: false });\n    //   const animations = QuickSortAnimation(array);\n\n    //   const arrayBars = document.getElementsByClassName(\"array-bar\");\n\n    //   for (let i = 0; i < animations.length - 1; i++) {\n    //     const [barOneIdx, newHeight1] = animations[i];\n    //     const [barTwoIdx, newHeight2] = animations[i + 1];\n    //     const barOneStyle = arrayBars[barOneIdx].style;\n    //     const barTwoStyle = arrayBars[barTwoIdx].style;\n\n    //     // setTimeout(() => {\n    //     //   barOneStyle.backgroundColor = SECONDARY_COLOR;\n    //     //   barTwoStyle.backgroundColor = SECONDARY_COLOR;\n    //     // }, i * ANIMATION_SPEED_MS);\n\n    //     setTimeout(() => {\n    //       barOneStyle.height = `${newHeight1}px`;\n    //       barTwoStyle.height = `${newHeight2}px`;\n    //     }, i * ANIMATION_SPEED_MS);\n\n    //     Total_time_taken = i;\n    //   }\n\n    //   this.setState({ array });\n    //   this.FinishedSorting();\n    //   // console.log(array);\n    //   // const jsSortedArray = array.slice().sort((a, b) => a - b);\n    //   // const NewArray = QuickSortAnimation(array);\n    //   // console.log(NewArray);\n    //   // console.log(checkIfArraysAreEqual(jsSortedArray, NewArray));\n    // }\n  };\n\n  render() {\n    return (\n      <div>\n        <Navbar\n          mergeSort={this.mergeSort}\n          bubbleSort={this.bubbleSort}\n          selectionSort={this.selectionSort}\n          quickSort={this.quickSort}\n          finishedSorting={this.state.finishedSorting}\n          initialSort={initialSort}\n        />\n      </div>\n    );\n  }\n}\n\nfunction checkIfArraysAreEqual(arrayOne, arrayTwo) {\n  if (arrayOne.length !== arrayTwo.length) return false;\n\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== arrayTwo[i]) return false;\n  }\n  return true;\n}\n","export function BubbleSortAnimation(array) {\r\n  //copy original array to a temporary array\r\n  const temp = array.slice();\r\n  const animations = [];\r\n  bubbleSort(array.length, animations, temp);\r\n  return animations;\r\n}\r\n\r\nfunction bubbleSort(n, animations, temp) {\r\n  let i = 0;\r\n  let j = 0;\r\n\r\n  for (i = 0; i < n - 1; i++) {\r\n    for (j = 0; j < n - i - 1; j++) {\r\n      if (temp[j] > temp[j + 1]) {\r\n        //These are the values we are comparing\r\n        animations.push([j, temp[j]]);\r\n        animations.push([j + 1, temp[j + 1]]);\r\n        //swap\r\n        var t = temp[j + 1];\r\n        temp[j + 1] = temp[j];\r\n        temp[j] = t;\r\n        //These are the values we are comparing\r\n        animations.push([j, temp[j]]);\r\n        animations.push([j + 1, temp[j + 1]]);\r\n      } else {\r\n        animations.push([j, temp[j]]);\r\n        animations.push([j + 1, temp[j + 1]]);\r\n      }\r\n    }\r\n  }\r\n\r\n  return animations;\r\n}\r\n","export function SelectionSortAnimation(array) {\r\n  const temp = array.slice();\r\n  const animations = [];\r\n  selectionSort(array.length, temp, animations);\r\n  return animations;\r\n}\r\n\r\nfunction selectionSort(n, temp, animations) {\r\n  var i,\r\n    j,\r\n    min,\r\n    tempVariable = 0;\r\n\r\n  for (i = 0; i < n - 1; i++) {\r\n    min = i;\r\n    for (j = i + 1; j < n; j++) {\r\n      if (temp[j] < temp[min]) {\r\n        min = j;\r\n      }\r\n    }\r\n    animations.push([i, temp[i]]);\r\n    animations.push([min, temp[min]]);\r\n\r\n    tempVariable = temp[i];\r\n    temp[i] = temp[min];\r\n    temp[min] = tempVariable;\r\n\r\n    animations.push([i, temp[i]]);\r\n    animations.push([min, temp[min]]);\r\n  }\r\n  return animations;\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Sorter from \"./components/sorter\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Sorter />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}