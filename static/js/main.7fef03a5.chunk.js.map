{"version":3,"sources":["SortingAlgorithms/MergeSortAnimation.jsx","components/sorter.jsx","SortingAlgorithms/BubbleSortAnimation.jsx","SortingAlgorithms/InsertionSortAnimation.jsx","App.js","serviceWorker.js","index.js"],"names":["MergeSortAnimation","array","animations","temp","slice","mergeSort","start","end","mid","Math","floor","k","i","j","push","merge","length","Total_time_taken","Sorter","props","PushRandomNumber","min","max","random","setState","state","bars","document","getElementsByClassName","setTimeout","style","backgroundColor","this","n","t","bubbleSort","BubbleSortAnimation","arrayBars","barOneIdx","newHeight1","barTwoIdx","newHeight2","barOneStyle","barTwoStyle","height","FinishedSorting","key","insertionSort","InsertionSortAnimation","color","newHeight","className","onClick","role","aria-label","disabled","quickSort","map","value","index","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7fef03a5.chunk.js","sourcesContent":["export function MergeSortAnimation(array) {\r\n  const animations = [];\r\n  const temp = array.slice();\r\n  mergeSort(array, 0, array.length - 1, temp, animations);\r\n  return animations;\r\n}\r\n\r\nfunction mergeSort(array, start, end, temp, animations) {\r\n  if (start < end) {\r\n    const mid = Math.floor((start + end) / 2);\r\n    mergeSort(temp, start, mid, array, animations);\r\n    mergeSort(temp, mid + 1, end, array, animations);\r\n    merge(array, start, mid, end, temp, animations);\r\n  }\r\n}\r\n\r\nfunction merge(array, start, mid, end, temp, animations) {\r\n  let k = start;\r\n  let i = start;\r\n  let j = mid + 1;\r\n  while (i <= mid && j <= end) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([i, j]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([i, j]);\r\n    if (temp[i] <= temp[j]) {\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n      animations.push([k, temp[i]]);\r\n      array[k++] = temp[i++];\r\n    } else {\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index j in the auxiliary array.\r\n      animations.push([k, temp[j]]);\r\n      array[k++] = temp[j++];\r\n    }\r\n  }\r\n  while (i <= mid) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([i, i]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([i, i]);\r\n    // We overwrite the value at index k in the original array with the\r\n    // value at index i in the auxiliary array.\r\n    animations.push([k, temp[i]]);\r\n    array[k++] = temp[i++];\r\n  }\r\n  while (j <= end) {\r\n    // These are the values that we're comparing; we push them once\r\n    // to change their color.\r\n    animations.push([j, j]);\r\n    // These are the values that we're comparing; we push them a second\r\n    // time to revert their color.\r\n    animations.push([j, j]);\r\n    // We overwrite the value at index k in the original array with the\r\n    // value at index j in the auxiliary array.\r\n    animations.push([k, temp[j]]);\r\n    array[k++] = temp[j++];\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport \"./Body.css\";\r\nimport { BubbleSortAnimation } from \"../SortingAlgorithms/BubbleSortAnimation\";\r\nimport { InsertionSortAnimation } from \"../SortingAlgorithms/InsertionSortAnimation\";\r\nimport { MergeSortAnimation } from \"../SortingAlgorithms/MergeSortAnimation\";\r\nimport { QuickSortAnimation } from \"../SortingAlgorithms/QuickSortAnimation\";\r\n\r\n//No. of Array-Bars(This value chosen so that all bars fit in a single page)\r\nconst NUMBER_OF_ARRAY_BARS = 79;\r\n//const NUMBER_OF_ARRAY_BARS = 5;\r\n//Main Color of the Array-Bars\r\nconst PRIMARY_COLOR = \"cornflowerblue\";\r\n//Speed of the Animation\r\nconst ANIMATION_SPEED_MS = 10;\r\n//Color of the Array-Bars which are being compared during the sorting\r\nconst SECONDARY_COLOR = \"red\";\r\n//Color of bars when array is Sorted\r\nconst FINAL_COLOR = \"SlateBlue\";\r\n//Total time taken to finish Sorting(Global Variable)\r\nlet Total_time_taken;\r\n\r\nexport default class Sorter extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      array: [],\r\n    };\r\n  }\r\n\r\n  FinishedSorting() {\r\n    let bars = document.getElementsByClassName(\"array-bar\");\r\n    setTimeout(() => {\r\n      for (let i = 0; i < bars.length; i++)\r\n        bars[i].style.backgroundColor = FINAL_COLOR;\r\n    }, Total_time_taken * ANIMATION_SPEED_MS);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.PushRandomNumber();\r\n  }\r\n\r\n  //Function to push random nos. in the array\r\n  PushRandomNumber = () => {\r\n    const array = [];\r\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\r\n      //Range of nos. is chosen so that array bar height fit in the page\r\n      //Least value is taken as 5 so that smallest bar is significantly visible\r\n      array.push(randomNoFromInterval(5, 535));\r\n    }\r\n    this.setState({ array });\r\n  };\r\n\r\n  bubbleSort() {\r\n    //console.log(this.state.array);\r\n    //const jsSortedArray = this.state.array.slice().sort((a, b) => a - b);\r\n    //const NewArray = BubbleSortAnimation(this.state.array);\r\n    //console.log(checkIfArraysAreEqual(jsSortedArray, NewArray));\r\n    const animations = BubbleSortAnimation(this.state.array);\r\n\r\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n\r\n    for (let i = 0; i < animations.length - 1; i++) {\r\n      const [barOneIdx, newHeight1] = animations[i];\r\n      const [barTwoIdx, newHeight2] = animations[i + 1];\r\n      const barOneStyle = arrayBars[barOneIdx].style;\r\n      const barTwoStyle = arrayBars[barTwoIdx].style;\r\n\r\n      //console.log(i, i + 1);\r\n      setTimeout(() => {\r\n        //const Color = i % 2 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        barOneStyle.backgroundColor = PRIMARY_COLOR;\r\n        barTwoStyle.backgroundColor = SECONDARY_COLOR;\r\n      }, i * ANIMATION_SPEED_MS);\r\n\r\n      setTimeout(() => {\r\n        barOneStyle.height = `${newHeight1}px`;\r\n        barTwoStyle.height = `${newHeight2}px`;\r\n      }, i * ANIMATION_SPEED_MS);\r\n\r\n      Total_time_taken = i;\r\n    }\r\n    //console.log(NewArray);\r\n    this.FinishedSorting();\r\n  }\r\n\r\n  insertionSort() {\r\n    /*console.log(this.state.array);\r\n    const jsSortedArray = this.state.array.slice().sort((a, b) => a - b);\r\n    const NewArray = InsertionSortAnimation(this.state.array);\r\n    console.log(checkIfArraysAreEqual(jsSortedArray, NewArray));*/\r\n    const animations = InsertionSortAnimation(this.state.array);\r\n  }\r\n\r\n  mergeSort() {\r\n    const animations = MergeSortAnimation(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, i * ANIMATION_SPEED_MS);\r\n      }\r\n      Total_time_taken = i;\r\n    }\r\n    this.FinishedSorting();\r\n  }\r\n\r\n  quickSort() {\r\n    /*console.log(this.state.array);\r\n    const jsSortedArray = this.state.array.slice().sort((a, b) => a - b);\r\n    const NewArray = QuickSortAnimation(this.state.array);\r\n    console.log(checkIfArraysAreEqual(jsSortedArray, NewArray));*/\r\n  }\r\n\r\n  render() {\r\n    const { array } = this.state;\r\n    return (\r\n      <div className=\"parent\">\r\n        <nav className=\"navbar navbar-dark bg-dark\">\r\n          <div className=\"container-fluid\">\r\n            <div className=\"navbar-header\">\r\n              <button\r\n                className=\"btn btn-outline-light navbar-btn\"\r\n                onClick={() => this.PushRandomNumber()}\r\n              >\r\n                Generate New Array\r\n              </button>\r\n            </div>\r\n\r\n            <div className=\"btn-group\" role=\"group\" aria-label=\"Basic example\">\r\n              <button\r\n                className=\"btn btn-outline-light navbar-btn m-2\"\r\n                onClick={() => this.bubbleSort()}\r\n              >\r\n                Bubble Sort\r\n              </button>\r\n\r\n              <button\r\n                className=\"btn btn-outline-light navbar-btn m-2\"\r\n                disabled\r\n                onClick={() => this.insertionSort()}\r\n              >\r\n                Insertion Sort\r\n              </button>\r\n\r\n              <button\r\n                className=\"btn btn-outline-light navbar-btn m-2\"\r\n                onClick={() => this.mergeSort()}\r\n              >\r\n                Merge Sort\r\n              </button>\r\n\r\n              <button\r\n                className=\"btn btn-outline-light navbar-btn m-2\"\r\n                disabled\r\n                onClick={() => this.quickSort()}\r\n              >\r\n                Quick Sort\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </nav>\r\n\r\n        <div className=\"array-container\">\r\n          {array.map((value, index) => (\r\n            <div\r\n              className=\"array-bar\"\r\n              key={index}\r\n              style={{\r\n                backgroundColor: PRIMARY_COLOR,\r\n                height: `${value}px`,\r\n              }}\r\n            ></div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n//Function to generate random nos. in a specified range(Requirement of javascript to specify range)\r\nfunction randomNoFromInterval(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nfunction checkIfArraysAreEqual(arrayOne, arrayTwo) {\r\n  if (arrayOne.length !== arrayTwo.length) return false;\r\n\r\n  for (let i = 0; i < arrayOne.length; i++) {\r\n    if (arrayOne[i] !== arrayTwo[i]) return false;\r\n  }\r\n  return true;\r\n}\r\n","export function BubbleSortAnimation(array) {\r\n  //copy original array to a temporary array\r\n  const temp = array.slice();\r\n  const animations = [];\r\n  bubbleSort(array.length, animations, temp);\r\n  return animations;\r\n}\r\n\r\nfunction bubbleSort(n, animations, temp) {\r\n  let i = 0;\r\n  let j = 0;\r\n\r\n  for (i = 0; i < n - 1; i++) {\r\n    for (j = 0; j < n - i - 1; j++) {\r\n      if (temp[j] > temp[j + 1]) {\r\n        //These are the values we are comparing\r\n        animations.push([j, temp[j + 1]]);\r\n        //swap\r\n        var t = temp[j + 1];\r\n        temp[j + 1] = temp[j];\r\n        temp[j] = t;\r\n        //These are the values we are comparing\r\n        animations.push([j + 1, temp[j + 1]]);\r\n      } else {\r\n        animations.push([j, temp[j]]);\r\n        animations.push([j + 1, temp[j + 1]]);\r\n      }\r\n    }\r\n  }\r\n  /*\r\n  for (i = 0; i < n; i++) {\r\n    console.log(array[i]);\r\n  }\r\n  console.log(\"\\n\");*/\r\n  /*\r\n  for (i = 0; i < n; i++) {\r\n    //console.log(temp[i]);\r\n    animations.push(temp[i]);\r\n  }*/\r\n  return animations;\r\n}\r\n","export function InsertionSortAnimation(array) {\r\n  const temp = array.slice();\r\n  const animations = [];\r\n  insertionSort(array.length, temp, animations);\r\n  return animations;\r\n}\r\n\r\nfunction insertionSort(n, temp, animations) {\r\n  let key;\r\n  let j;\r\n  for (let i = 1; i < n; i++) {\r\n    key = temp[i];\r\n    j = i - 1;\r\n    while (j >= 0 && temp[j] > key) {\r\n      temp[j + 1] = temp[j];\r\n      j--;\r\n    }\r\n\r\n    temp[j + 1] = key;\r\n    animations.push([j + 1, temp[j + 1]]);\r\n    //console.log(j + 1);\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Sorter from \"./components/sorter\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Sorter></Sorter>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}